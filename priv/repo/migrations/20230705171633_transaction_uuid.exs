defmodule Spendable.Repo.Migrations.TransactionUuid do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:budget_allocations) do
      add :transaction_uuid, :uuid
    end

    execute """
    UPDATE budget_allocations
    SET transaction_uuid = transactions.uuid
    FROM transactions
    WHERE budget_allocations.transaction_id = transactions.id
    """

    alter table(:budget_allocations) do
      remove :transaction_id
    end

    rename table(:budget_allocations), :transaction_uuid, to: :transaction_id

    alter table(:transactions) do
      remove :id
      modify :uuid, :uuid, null: false, primary_key: true
    end

    rename table(:transactions), :uuid, to: :id

    create index(:transactions, ["user_id"])

    create index(:transactions, ["bank_transaction_id"])

    drop_if_exists unique_index(:transactions, [:uuid], name: "transactions_uuid_index")

    alter table(:budget_allocations) do
      modify :transaction_id,
             references(:transactions,
               column: :id,
               prefix: "public",
               name: "budget_allocations_transaction_id_fkey",
               type: :uuid
             ),
             null: false
    end
  end

  def down do
    alter table(:budget_allocations) do
      modify :transaction_id, :bigint
    end

    create unique_index(:transactions, [:uuid], name: "transactions_uuid_index")

    alter table(:transactions) do
      modify :id, :bigint, default: nil
      # This is the `down` migration of the statement:
      #
      #     remove :uuid
      #

      # add :uuid, :uuid, default: fragment("uuid_generate_v4()")
    end

    drop_if_exists index(:transactions, ["bank_transaction_id"],
                     name: "transactions_bank_transaction_id_index"
                   )

    drop_if_exists index(:transactions, ["user_id"], name: "transactions_user_id_index")
  end
end
