defmodule Spendable.Repo.Migrations.BankTransactionUuid do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:transactions) do
      add :bank_transaction_uuid, :uuid
    end

    execute """
    UPDATE transactions
    SET bank_transaction_uuid = bank_transactions.uuid
    FROM bank_transactions
    WHERE transactions.bank_transaction_id = bank_transactions.id
    """

    alter table(:transactions) do
      remove :bank_transaction_id
    end

    rename table(:transactions), :bank_transaction_uuid, to: :bank_transaction_id

    alter table(:bank_transactions) do
      remove :id
      modify :uuid, :uuid, null: false, primary_key: true
    end

    rename table(:bank_transactions), :uuid, to: :id

    create index(:budgets, ["user_id"])

    create index(:bank_transactions, ["user_id"])

    create index(:bank_transactions, ["bank_account_id"])

    drop_if_exists unique_index(:bank_transactions, [:uuid], name: "bank_transactions_uuid_index")

    create unique_index(:bank_transactions, [:external_id, :bank_account_id],
             name: "bank_transactions_external_id_index"
           )

    alter table(:transactions) do
      modify :bank_transaction_id,
             references(:bank_transactions,
               column: :id,
               prefix: "public",
               name: "bank_transactions_bank_transaction_id_fkey",
               type: :uuid
             )
    end
  end

  def down do
    drop_if_exists unique_index(:bank_transactions, [:external_id, :bank_account_id],
                     name: "bank_transactions_external_id_index"
                   )

    create unique_index(:bank_transactions, [:uuid], name: "bank_transactions_uuid_index")

    alter table(:bank_transactions) do
      modify :id, :bigint, default: nil
      # This is the `down` migration of the statement:
      #
      #     remove :uuid
      #

      # add :uuid, :uuid, default: fragment("uuid_generate_v4()")
    end

    drop_if_exists index(:bank_transactions, ["bank_account_id"],
                     name: "bank_transactions_bank_account_id_index"
                   )

    drop_if_exists index(:bank_transactions, ["user_id"], name: "bank_transactions_user_id_index")

    drop_if_exists index(:budgets, ["user_id"], name: "budgets_user_id_index")

    alter table(:transactions) do
      modify :bank_transaction_id, :bigint
    end
  end
end
